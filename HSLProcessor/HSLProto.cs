// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HSLProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HSLProto {

  /// <summary>Holder for reflection information generated from HSLProto.proto</summary>
  public static partial class HSLProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for HSLProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HSLProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5IU0xQcm90by5wcm90byJoCgNIU0wSFAoFc29uZ3MYASADKAsyBS5Tb25n",
            "EhgKB2FydGlzdHMYAiADKAsyBy5BcnRpc3QSGAoHc291cmNlcxgDIAMoCzIH",
            "LlNvdXJjZRIXCgZzZXJpZXMYBCADKAsyBy5TZXJpZXMiVgoEU29uZxIUCgxz",
            "ZXJpYWxOdW1iZXIYASABKAUSCgoCaWQYAiABKAkSDAoEbmFtZRgDIAEoCRIO",
            "CgZhcnRpc3QYBCABKAUSDgoGc291cmNlGAUgASgFIjgKBkFydGlzdBIUCgxz",
            "ZXJpYWxOdW1iZXIYASABKAUSCgoCaWQYAiABKAkSDAoEbmFtZRgDIAEoCSJI",
            "CgZTb3VyY2USFAoMc2VyaWFsTnVtYmVyGAEgASgFEgoKAmlkGAIgASgJEgwK",
            "BG5hbWUYAyABKAkSDgoGc2VyaWVzGAQgASgFIjgKBlNlcmllcxIUCgxzZXJp",
            "YWxOdW1iZXIYASABKAUSCgoCaWQYAiABKAkSDAoEbmFtZRgDIAEoCUILqgII",
            "SFNMUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HSLProto.HSL), global::HSLProto.HSL.Parser, new[]{ "Songs", "Artists", "Sources", "Series" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HSLProto.Song), global::HSLProto.Song.Parser, new[]{ "SerialNumber", "Id", "Name", "Artist", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HSLProto.Artist), global::HSLProto.Artist.Parser, new[]{ "SerialNumber", "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HSLProto.Source), global::HSLProto.Source.Parser, new[]{ "SerialNumber", "Id", "Name", "Series" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HSLProto.Series), global::HSLProto.Series.Parser, new[]{ "SerialNumber", "Id", "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HSL : pb::IMessage<HSL> {
    private static readonly pb::MessageParser<HSL> _parser = new pb::MessageParser<HSL>(() => new HSL());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HSL> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HSLProto.HSLProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HSL() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HSL(HSL other) : this() {
      songs_ = other.songs_.Clone();
      artists_ = other.artists_.Clone();
      sources_ = other.sources_.Clone();
      series_ = other.series_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HSL Clone() {
      return new HSL(this);
    }

    /// <summary>Field number for the "songs" field.</summary>
    public const int SongsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HSLProto.Song> _repeated_songs_codec
        = pb::FieldCodec.ForMessage(10, global::HSLProto.Song.Parser);
    private readonly pbc::RepeatedField<global::HSLProto.Song> songs_ = new pbc::RepeatedField<global::HSLProto.Song>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HSLProto.Song> Songs {
      get { return songs_; }
    }

    /// <summary>Field number for the "artists" field.</summary>
    public const int ArtistsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::HSLProto.Artist> _repeated_artists_codec
        = pb::FieldCodec.ForMessage(18, global::HSLProto.Artist.Parser);
    private readonly pbc::RepeatedField<global::HSLProto.Artist> artists_ = new pbc::RepeatedField<global::HSLProto.Artist>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HSLProto.Artist> Artists {
      get { return artists_; }
    }

    /// <summary>Field number for the "sources" field.</summary>
    public const int SourcesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::HSLProto.Source> _repeated_sources_codec
        = pb::FieldCodec.ForMessage(26, global::HSLProto.Source.Parser);
    private readonly pbc::RepeatedField<global::HSLProto.Source> sources_ = new pbc::RepeatedField<global::HSLProto.Source>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HSLProto.Source> Sources {
      get { return sources_; }
    }

    /// <summary>Field number for the "series" field.</summary>
    public const int SeriesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::HSLProto.Series> _repeated_series_codec
        = pb::FieldCodec.ForMessage(34, global::HSLProto.Series.Parser);
    private readonly pbc::RepeatedField<global::HSLProto.Series> series_ = new pbc::RepeatedField<global::HSLProto.Series>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HSLProto.Series> Series {
      get { return series_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HSL);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HSL other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!songs_.Equals(other.songs_)) return false;
      if(!artists_.Equals(other.artists_)) return false;
      if(!sources_.Equals(other.sources_)) return false;
      if(!series_.Equals(other.series_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= songs_.GetHashCode();
      hash ^= artists_.GetHashCode();
      hash ^= sources_.GetHashCode();
      hash ^= series_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      songs_.WriteTo(output, _repeated_songs_codec);
      artists_.WriteTo(output, _repeated_artists_codec);
      sources_.WriteTo(output, _repeated_sources_codec);
      series_.WriteTo(output, _repeated_series_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += songs_.CalculateSize(_repeated_songs_codec);
      size += artists_.CalculateSize(_repeated_artists_codec);
      size += sources_.CalculateSize(_repeated_sources_codec);
      size += series_.CalculateSize(_repeated_series_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HSL other) {
      if (other == null) {
        return;
      }
      songs_.Add(other.songs_);
      artists_.Add(other.artists_);
      sources_.Add(other.sources_);
      series_.Add(other.series_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            songs_.AddEntriesFrom(input, _repeated_songs_codec);
            break;
          }
          case 18: {
            artists_.AddEntriesFrom(input, _repeated_artists_codec);
            break;
          }
          case 26: {
            sources_.AddEntriesFrom(input, _repeated_sources_codec);
            break;
          }
          case 34: {
            series_.AddEntriesFrom(input, _repeated_series_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Song : pb::IMessage<Song> {
    private static readonly pb::MessageParser<Song> _parser = new pb::MessageParser<Song>(() => new Song());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Song> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HSLProto.HSLProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song(Song other) : this() {
      serialNumber_ = other.serialNumber_;
      id_ = other.id_;
      name_ = other.name_;
      artist_ = other.artist_;
      source_ = other.source_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song Clone() {
      return new Song(this);
    }

    /// <summary>Field number for the "serialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 1;
    private int serialNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 4;
    private int artist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Artist {
      get { return artist_; }
      set {
        artist_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 5;
    private int source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Song);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Song other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerialNumber != other.SerialNumber) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Artist != other.Artist) return false;
      if (Source != other.Source) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerialNumber != 0) hash ^= SerialNumber.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Artist != 0) hash ^= Artist.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerialNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SerialNumber);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Artist != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Artist);
      }
      if (Source != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerialNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerialNumber);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Artist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Artist);
      }
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Song other) {
      if (other == null) {
        return;
      }
      if (other.SerialNumber != 0) {
        SerialNumber = other.SerialNumber;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Artist != 0) {
        Artist = other.Artist;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SerialNumber = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Artist = input.ReadInt32();
            break;
          }
          case 40: {
            Source = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Artist : pb::IMessage<Artist> {
    private static readonly pb::MessageParser<Artist> _parser = new pb::MessageParser<Artist>(() => new Artist());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HSLProto.HSLProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist(Artist other) : this() {
      serialNumber_ = other.serialNumber_;
      id_ = other.id_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist Clone() {
      return new Artist(this);
    }

    /// <summary>Field number for the "serialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 1;
    private int serialNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerialNumber != other.SerialNumber) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerialNumber != 0) hash ^= SerialNumber.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerialNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SerialNumber);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerialNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerialNumber);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artist other) {
      if (other == null) {
        return;
      }
      if (other.SerialNumber != 0) {
        SerialNumber = other.SerialNumber;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SerialNumber = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Source : pb::IMessage<Source> {
    private static readonly pb::MessageParser<Source> _parser = new pb::MessageParser<Source>(() => new Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HSLProto.HSLProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source(Source other) : this() {
      serialNumber_ = other.serialNumber_;
      id_ = other.id_;
      name_ = other.name_;
      series_ = other.series_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source Clone() {
      return new Source(this);
    }

    /// <summary>Field number for the "serialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 1;
    private int serialNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "series" field.</summary>
    public const int SeriesFieldNumber = 4;
    private int series_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Series {
      get { return series_; }
      set {
        series_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerialNumber != other.SerialNumber) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Series != other.Series) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerialNumber != 0) hash ^= SerialNumber.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Series != 0) hash ^= Series.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerialNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SerialNumber);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Series != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Series);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerialNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerialNumber);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Series != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Series);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Source other) {
      if (other == null) {
        return;
      }
      if (other.SerialNumber != 0) {
        SerialNumber = other.SerialNumber;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Series != 0) {
        Series = other.Series;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SerialNumber = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Series = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Series : pb::IMessage<Series> {
    private static readonly pb::MessageParser<Series> _parser = new pb::MessageParser<Series>(() => new Series());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Series> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HSLProto.HSLProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Series() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Series(Series other) : this() {
      serialNumber_ = other.serialNumber_;
      id_ = other.id_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Series Clone() {
      return new Series(this);
    }

    /// <summary>Field number for the "serialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 1;
    private int serialNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Series);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Series other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerialNumber != other.SerialNumber) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerialNumber != 0) hash ^= SerialNumber.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerialNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SerialNumber);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerialNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerialNumber);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Series other) {
      if (other == null) {
        return;
      }
      if (other.SerialNumber != 0) {
        SerialNumber = other.SerialNumber;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SerialNumber = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
